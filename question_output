from selenium import webdriver
from selenium.webdriver.common.by import By
from backoff import expo
from logging import DEBUG, basicConfig, debug
from tkinter import simpledialog
from time import sleep
import main

basicConfig(level=DEBUG)
driver = webdriver.Edge()
try:
    main.open_web(driver)
    main.on_predicate(wait_gen=expo, predicate=lambda x: not x)
    main.safe_click(driver, "登入")

    @main.function_logger
    def user_ui():
        global chapter_list
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.webdriver.common.by import By
        from bs4 import BeautifulSoup
        # 打開網頁並執行一些操作
        main.safe_click(driver, "選擇章節")
        final_url = driver.current_url  # 或者等待某個特定元素加載完成

        # 等待直到網頁內容加載完成
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))

        # 獲取網頁源代碼
        html_source = driver.page_source

        # 解析網頁內容
        soup = BeautifulSoup(html_source, 'html.parser')

        # 專注於解析第二個 table
        def extract_chapters_from_second_table(soup):
            tables = soup.find_all('table')
            if len(tables) < 2:
                return []  # 如果沒有足夠的表格，返回空列表

            second_table = tables[1]
            chapters = []
            for table_row in second_table.find_all('tr'):
                cells = table_row.find_all('td')
                if len(cells) >= 2:
                    chapter_number = cells[1].text.strip()
                    chapter_title = cells[2].text.strip()
                    chapters.append(f"{chapter_number}  {chapter_title}")
            return chapters
        
        def extract_all_chapters():
            chapters = []
            # 定位到第三個 ul 元素
            pagination_ul = driver.find_elements(By.CSS_SELECTOR, 'ul')[2]
            page_numbers = pagination_ul.find_elements(By.TAG_NAME, 'li')[1:6]

            for i in range(len(page_numbers)):
                # 點擊頁碼
                page_numbers[i].click()
                
                # 等待頁面加載
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
                
                # 提取當前頁面的章節資料
                soup = BeautifulSoup(driver.page_source, 'html.parser')
                chapters.extend(extract_chapters_from_second_table(soup))

                # 重新定位到第三個 ul 元素並更新頁碼元素列表
                pagination_ul = driver.find_elements(By.CSS_SELECTOR, 'ul')[2]
                page_numbers = pagination_ul.find_elements(By.TAG_NAME, 'li')[1:6]


            return chapters
        
        chapter_list = extract_all_chapters()

    def ui():
        import tkinter as tk
        from tkinter import Toplevel, Frame, Checkbutton, StringVar
        def open_selection_window():
            global chapter_vars  # 使用全局變量來保存勾選框的狀態

            selection_window = Toplevel(window)
            selection_window.title("選擇章節")
            selection_window.geometry("+{}+{}".format(window.winfo_x() + 200, window.winfo_y() + 50))

            chapters_per_page = 10
            total_chapters = 48
            options = chapter_list

            pages = []
            chapter_vars = {}
            for i in range(0, total_chapters, chapters_per_page):
                frame = Frame(selection_window)
                pages.append(frame)
                for j in range(i, min(i + chapters_per_page, total_chapters)):
                    var = StringVar(value="0")
                    if options[j] in selected_options:  # 如果章節已被選擇，預設為勾選
                        var.set("1")
                    chk = Checkbutton(frame, text=options[j], variable=var)
                    chk.pack()
                    chapter_vars[options[j]] = var

            def show_page(index):
                for frame in pages:
                    frame.pack_forget()
                pages[index].pack()

            # 頁碼按鈕
            page_buttons_frame = Frame(selection_window)
            for i in range(len(pages)):
                btn = tk.Button(page_buttons_frame, text=str(i + 1), command=lambda i=i: show_page(i))
                btn.pack(side=tk.LEFT)
            page_buttons_frame.pack(side=tk.TOP)

            # 底部按鈕
            bottom_buttons_frame = Frame(selection_window)

            # 確認按鈕
            confirm_btn = tk.Button(bottom_buttons_frame, text="確認", command=lambda: submit_and_close(selection_window, chapter_vars))
            confirm_btn.pack(side=tk.LEFT)

            # 取消按鈕
            cancel_btn = tk.Button(bottom_buttons_frame, text="取消", command=selection_window.destroy)
            cancel_btn.pack(side=tk.LEFT)

            bottom_buttons_frame.pack(side=tk.BOTTOM)

            show_page(0)  # 顯示第一頁

        def submit_and_close(selection_window, chapter_vars):
            submit_selections(chapter_vars)
            selection_window.destroy()

        def submit_selections(chapter_vars):
            for chapter, var in chapter_vars.items():
                if var.get() == "1":
                    if chapter not in selected_options:
                        add_selected_option(chapter)
                elif chapter in selected_options:
                    remove_selected_option(chapter)

        def add_selected_option(option_text):
            def remove_option():
                option_frame.destroy()
                del selected_options[option_text]
                chapter_vars[option_text].set("0")  # 更新副視窗中的勾選框

            option_frame = tk.Frame(window)
            option_frame.pack()

            tk.Label(option_frame, text=option_text).pack(side=tk.LEFT)
            remove_btn = tk.Button(option_frame, text="取消", command=remove_option)
            remove_btn.pack(side=tk.LEFT)

            selected_options[option_text] = option_frame

        def remove_selected_option(option_text):
            selected_options[option_text].destroy()
            del selected_options[option_text]

        window = tk.Tk()
        window.title("主視窗")
        window.geometry("300x200")

        selected_options = {}
        chapter_vars = {}

        chapter_btn = tk.Button(window, text="章節", command=open_selection_window)
        chapter_btn.pack()

        window.mainloop()

    course = simpledialog.askstring("course name", "Please enter a course📚:")
    if course == "":
        course = "Test"
    main.on_stale_element_reference_exception(
        lambda: next(
            div
            for div in driver.find_elements(By.TAG_NAME, "div")
            if course == div.text
        ).click()
    )()
    sleep(1)
    driver.find_elements(By.CLASS_NAME, "semi-navigation-item-text")[1].click()
    chapter_list = []
    user_ui()
    #print(chapter_list)
    ui()
    driver.quit()
finally:
    pass
